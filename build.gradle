plugins {
    id 'java'  // Core Java support for Gradle builds
    id 'org.springframework.boot' version '3.5.4'  // Spring Boot plugin (bootRun, packaging, dependency versions)
    id 'io.spring.dependency-management' version '1.1.7'  // Manages transitive dependency versions consistently with Spring Boot's BOM
    id 'jacoco'  // JaCoCo plugin for test coverage reporting (HTML, XML, CSV reports) - https://docs.gradle.org/current/userguide/jacoco_plugin.html
}

group = 'com.nikospavlopoulos'
version = '0.0.1-SNAPSHOT'
description = 'skydivingrest'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
        vendor = JvmVendorSpec.AMAZON
    }
}

jacoco {
    toolVersion = "0.8.13"
//    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor  // Ensures annotation processors are available at compile-time only
    }
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly  // Include dev-only libraries when running `bootRun`
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // === RESTful API (Spring MVC + JSON) ===
    // Provides REST endpoints, embedded Tomcat, and JSON serialization via Jackson.
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // === Database Persistence (JPA/Hibernate) ===
    // ORM support with Hibernate, integrates with Spring Data repositories.
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // === Security & Authentication ===
    // Provides authentication/authorization framework (filters, config, BCrypt, etc).
//    implementation 'org.springframework.boot:spring-boot-starter-security'

    // === Validation ===
    // Bean validation with Jakarta Validation (annotations like @NotNull, @Email, etc).
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // === Boilerplate Reduction (Lombok) ===
    // Generates getters/setters/constructors at compile-time, avoids boilerplate.
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // === Databases (H2 + MySQL) ===
    implementation 'com.h2database:h2'
    runtimeOnly 'com.h2database:h2'  // In-memory database for dev/testing.
    runtimeOnly 'com.mysql:mysql-connector-j'  // MySQL driver for production database.

    // === Testing (JUnit, Spring Boot Test, Security Test) ===

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Brings JUnit 5, Mockito, Spring test utilities.
//    testImplementation 'org.springframework.security:spring-security-test'  // Security-specific test helpers (mock authentication, test filters).
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // Ensures test discovery and execution with JUnit 5 platform.

    // === API Documentation (OpenAPI/Swagger UI) ===
    // Generates Swagger/OpenAPI docs and provides a UI at /swagger-ui.html.
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.18.0'

    // === JWT Authentication ===
    // JJWT: library for creating and parsing JWT tokens, integrates with Jackson for JSON.
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // === Developer Productivity ===
    // Spring Boot DevTools: automatic app restarts, LiveReload integration, disables template caching.
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

}

tasks.named('test') {
    useJUnitPlatform()  // Use JUnit 5 platform for testing
    finalizedBy jacocoTestReport  // Always generate JaCoCo report after tests run
}


